
/*
Given an array arr[]. Push all the zeros of the given array to the right end of the array while maintaining the order of non-zero elements. Do the mentioned change in the array in place.

Examples:

Input: arr[] = [1, 2, 0, 4, 3, 0, 5, 0]
Output: [1, 2, 4, 3, 5, 0, 0, 0]
Explanation: There are three 0s that are moved to the end.
Input: arr[] = [10, 20, 30]
Output: [10, 20, 30]
Explanation: No change in array as there are no 0s.
Input: arr[] = [0, 0]
Output: [0, 0]
Explanation: No change in array as there are all 0s.

*/
Class Sharma
{
 static void pushZeroToEnd(int[] arr) {
   int len = arr. length;
   int count=0;
   for(int I =0 ; I<len;I++) {
     if(arr[I]!=0) {
      Swap(arr[I], arr[count]) ;
     }
   }
 }
}

/*

Optimized Approach (One Traversal):

1. Ek pointer count rakho jo initially 0 hoga.


2. Array ko ek baar traverse karo. Jab koi non-zero element mile:

Usse arr[count] ke saath swap kar do.

count ko 1 se increment kar do.




Is process mein, non-zero elements apne correct position par aajayenge aur zero elements automatically end mein shift ho jaayenge.

Example:

Input Array: [0, 1, 0, 3, 12]

Traversal Process:

Step 1: count = 0

Index 0 → Element 0 hai → Ignore.

count = 0.


Step 2:

Index 1 → Element 1 hai → Swap arr[count] (i.e., arr[0]) with arr[1].
Array: [1, 0, 0, 3, 12].

count = 1.


Step 3:

Index 2 → Element 0 hai → Ignore.

count = 1.


Step 4:

Index 3 → Element 3 hai → Swap arr[count] (i.e., arr[1]) with arr[3].
Array: [1, 3, 0, 0, 12].

count = 2.


Step 5:

Index 4 → Element 12 hai → Swap arr[count] (i.e., arr[2]) with arr[4].
Array: [1, 3, 12, 0, 0].

count = 3.



Final Output Array: [1, 3, 12, 0, 0]

Key Points:

Saare non-zero elements apne position par pahunch jaate hain (original order maintain hota hai).

Saare zero elements automatically end mein shift ho jaate hain.

Time Complexity:  (ek hi traversal).

Space Complexity:  (koi extra space nahi use hua).

*/
